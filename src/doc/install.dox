/** \page install Installation

- \subpage install_linux
- \subpage install_win

\section port 	Portability
Pteros is being developed on Linux with gcc and clang compilers. New versions are tested periodically on Windows under MinGW gcc compiler (see \ref install_win). Other compilers and operating systems are not tested because we have no other systems in possession. Design decisions are made with portability to Linux, Windows and MacOS in mind. Other systems are not considered. The code itself should be 100% portable providing that the dependencies are available for your system, but expect platform-dependent quirks and issues, which are common to all complex C++ programs, not only to Pteros.

\note
If you managed to compile Pteros on MacOS, please share your experience because we have no Mac machines to perform the tests.

\warning
Intel ICC compiles Pteros on Linux, but gives poor performance. Compiling with Intel MKL works, but gives broken Python bindings. Any help with these issues is appreciated!

\note Linux is considered as primary platform for Pteros. Installation on Windows is only tested from time to time and may be very tricky. You are warned.


\page install_linux Installation on Linux

\tableofcontents

\section depend 	Dependencies
The prerequisites for compilation of Pteros are the following.

Core dependencies:
- Standard-conforming C and C++11 compilers (tested with gcc>=4.8, clang>=3.1).
- <a href="http://www.cmake.org/">cmake</a> build system.
- <a href="http://www.boost.org/">boost</a> 1.48 or higher.
- <a href="http://eigen.tuxfamily.org/index.php?title=Main_Page">Eigen</a> linear algebra library (>=3.2).
- <a href="http://git-scm.com/">Git</a> for getting the source code.

For compiling dynamic plugins and python bindings (optional if you only want C++ core):
- <a href="https://www.python.org/">Python</a> 2.7 or higher (>=3.5 recommended).
- <a href="https://github.com/pybind/pybind11">Pybind11</a> binding generator library.

For building documentation (don't needed unless you want to contribute to the docs):
- <a href="www.doxygen.org">Doxygen</a>
- <a href="http://sphinx-doc.org/">Sphinx</a>

If you are using latest Ubuntu it should be enough to run the following command in the terminal to install all dependencies:
\code{.unparsed}
sudo apt-get install g++ cmake libeigen3-dev libboost-all-dev python3.5-dev python3.5-numpy pybind11-dev git doxygen python-sphinx
\endcode

In older Ubuntu versions pybind11 is not yet packaged so it should be installed from source:
\code{.unparsed}
git clone https://github.com/pybind/pybind11.git
mkdir pybind11-build
cd pybind11-build
cmake ../pybind11 -DPYBIND11_TEST=OFF
sudo make install
\endcode

Installation of dependencies on Windows is described \ref install_win "here".

\section build	Building Pteros

\subsection get Getting the code

Get the latest source code from the Git repository:
\code{.unparsed}
git clone -b experimental git://git.code.sf.net/p/pteros/code pteros-code
\endcode
This will create a directory named "pteros-code" in you current working directory and will download the source code into it.

\subsection compile Compiling
Create a separate build directory (for example 'pteros_build'). Go to this directory and issue the following commands:

\code{.unparsed}
cmake <path to Pteros source directory> -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=<where to install Pteros>
make
make install
\endcode

\warning The 'make install' command may require root access if you are installing into the system-wide location.

The first cmake command will print something like this:
\code{.unparsed}
------------------------------
IMPORTANT!
In order to be able to link with Pteros and to use Pteros Python modules
you have to add the following lines to your .bashrc file:
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:<path to Pteros>/lib"
export PYTHONPATH="$PYTHONPATH:<path to Pteros>/python"
export PATH="$PATH:<path to Pteros>/bin"
------------------------------
\endcode

Copy suggested lines and add them to your .bashrc file (it is assumed that bash shell is used. If it is not the case use the syntax of your actual shell instead).

If you want to compile with alternative compiler (for example Clang), add the following flags to cmake invocation:
\code{.unparsed}
-DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
\endcode

If both Python 3.x and 2.7 are installed in your system the version 3.x will be used by default (even if 2.7 if the system-default, like in Ubuntu).
To force version 2.7 add the following flag:

\code{.unparsed}
-DPYTHON_EXECUTABLE:FILEPATH=<path to python2.7 executable>
\endcode
In Ubuntu Python2.7 is usually a default, so just `python` could be sufficient.

\warning Make sure that you use correct python interpreter! If Pteros was compiled with Python 3.5 it won't work with 2.7 and vice versa!

\subsection test Testing installation

Run the following command:
\code{.unparsed}
pteros_analysis.py --help all
\endcode

If you see any errors then Pteros can't load plugins or something elese went wrong.

\note This is only applicable if you are building with Python support!

\subsection sasa Enabling SASA code

Pteros can perform the Solvent Accesible Surface Area (SASA) computatations using POWERSASA code developed in the <a href="http://www.kit.edu/english/">Karlsruhe Institute of Technology</a>. POWERSASA is licensed by specific and rather restrictive "Academic/Non-Profit SASA software license agreement".
See the comment file `thirdparty/sasa/LICENSE` for details.
This license is NOT Open Source and imply many restrictions!
Please read it carefully. If you agree with this license use the following flag when invoking cmake:
\code{.unparsed}
-DWITH_POWERSASA="ON"
\endcode
By default this code is NOT compiled. Pteros doesn't support SASA computations without it.
\note
I contacted the authors of POWERSASA several times and asked for official permision to use their code but got no reply. It seems that the project is abandoned and nobody is concerned about the licensing of POWERSASA now.


\subsection no_python 	Building Pteros without Python

Pteros could be build without Python by specifying the following flag:

\code{.unparsed} -DWITH_PYTHON="OFF" \endcode

In this case compiled C++ plugins are not built as python extension modules and python bindings are not produced.

\subsection standalone Building standalone analysis plugins

Compiled analysis plugins, which are written in C++, are compiled as Python extensions by default. However, it is possible to build each plugin as a separate standalone program, which does not depend on Python, by adding the following flag to CMake:

\code{.unparsed} -DSTANDALONE_PLUGINS="ON" \endcode

If you want to build plugins as the standalone programs AND as python extensions at the same time use the following flags:
\code{.unparsed}
cmake <usual options> -DWITH_PYTHON="ON" -DSTANDALONE_PLUGINS="ON"
make
make install
\endcode

\note
In this case each plugin will be compiled twice, so expect longer compilation time.

\subsection no_omp Building Pteros without OpenMP

By default Pteros is compiled with OpenMP paralellization of many internal operations. However, on certain computational clusters running SGE scheduler the usage of OpenMP is prohibited. There are also other situations when you may want to disable OpenMP. Use the following flag to compile without OpenMP:

\code{.unparsed}
cmake <usual options> -DWITH_OPENMP="OFF"
\endcode


\section trouble Troubleshooting

The most common problems during installation arise from bugs in Boost or in the compilers and from the wrong versions of the libraries, which are found by CMake. In general <a href="http://www.google.com">Google</a> is your best friend in solving any problem. If you are stuck completely write to <i>yesint4(AT)yahoo.com</i> and attach error messages and the system configuration (versions of all required libraries and compiler).

\subsection known_problems Known problems
- Clang compiler doesn't work with Boost < 1.52
- OpenMP in clang only works for clang++ >= 3.8 and if libomp is installed: `sudo apt install libomp-dev`
- If there are several Boost versions in the system CMake may find the right one for one library but the wrong one for the other, which causes very strange errors. The solution is to include the following flags to CMake invocation:
\code{.unparsed} -DBoost_NO_SYSTEM_PATHS=ON -DBOOST_ROOT="Correct path to boost" \endcode
- All Pteros plugins have to be up to date with the main library, but CMake doesn't always ensure this if you pull new updates from the repository. If plugins suddenly stop working after update delete CMakeCache.txt and CMakeFiles and recompile.


\section linking 	Linking with Pteros

It is recommended to use CMake. You \e can use autoconf/automake or custom Makefiles, but this will never be officially supported. The "template" subdirectory of the source tree contains the skeleton of CMake project, which could be used to link your own program with pteros libraries.


*/
